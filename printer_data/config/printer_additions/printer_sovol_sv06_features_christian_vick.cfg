;  Sovol SV06 Extra Features
;  Part of CV's Klipper Printer Additions.
;  
;  â€¢ More reliable probing (homing, mesh).
;
;  â€¢ Customized Gantry-Level without the brutal sound of the stock method: Either by micro-stepping against the gantry, or by reducing motor power (if the printer.cfg is configured for that).
;
;  â€¢ Fixes failing prints because of the error "Move exceeds maximum extrusion".
;
;  â€¢ Handles M600 Filament Changes.
;
;  â€¢ Replaces the stock PAUSE, RESUME, CANCEL_PRINT macros with enhanced macros.
;
;  â€¢ Idle-safety: Disable heaters and motors after 15 minutes of inactivity.
;
;  â€¢ Display stuck in startup-animation: Sometimes the displays of KlipperScreen / SV07 go into an endless startup-animation-loop, while the printer is still normally working via Mainsail. A missing preference of KlipperScreen causes this. This preference item is now created by the Klipper Printer Additions, so the display can exit the loop.
;
;  â€¢ Corrections for Bassamanator printer.cfg
;
;
;  
;  â€¢â€¢â€¢â€¢ Support
;  â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢
;    If my work supports you, you might like to support me too.
;  â€¢ PayPal: https://www.paypal.com/paypalme/Morgennebel/
;    
;    
;    When you buy something, please use my Referal-Link, at no additional cost:
;  â€¢ AliExpress: https://s.click.aliexpress.com/e/_De0Vu1h
;  â€¢ Amazon: https://amzn.to/3L35OX2
;    
;    Thank you!
;    Christian ðŸ™‚

[delayed_gcode _startup_check_svzerosix_features]
initial_duration: 3.01 
gcode:

  {% set module_version = "3.0b4 M:b4" %} 
  _Module_loaded_printer_add NAME="Sovol SV06 Features" VERSION="{module_version}"

  {% set psv = printer.save_variables.variables %}

  {% if psv.was_interrupted is not defined %}

    SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
  {% endif %} 

  {% if not psv.was_interrupted %}
    SAVE_VARIABLE VARIABLE=print_is_running_f VALUE=False

  {% endif %}

  {% set rcz = 0 %}

  {% if (printer.configfile.config["tmc2209 stepper_z"] is defined) %}

    {% set rcz = 0 if (printer.configfile.config["tmc2209 stepper_z"].run_current is not defined) else printer.configfile.config["tmc2209 stepper_z"].run_current %}
  {% else %}

  {% endif %}
  SET_GCODE_VARIABLE MACRO=_varis VARIABLE=drivercurrent_z VALUE={rcz}

[gcode_macro Mesh_Create_All_Temperatures]
description: KPA Button. Creates bed meshes in steps of 10Â°C, which can then be automatically used for upcoming prints, according to the bed's print temperature. 
gcode:
  {% set myname = "Mesh_Create_All_Temperatures" %}
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% if varis.button_clicked_name != myname %} 
    {action_respond_info("INFO: This will create & save multiple bed meshes for all print temperatures, in steps of 10Â°C.

    Click this button within 5 seconds again to start.")}

  {% else %} 

    {% if varis.able_gantry_calibrate_f and psv.pre_print_gantry_calibrate_f %}

      _GAC
    {% endif %}

    _Mesh_Create_Calibrations_For_All_Temperatures
  {% endif %}

  _UI_Button_Clicked NAME={myname}

[gcode_macro _GAC]
gcode:
  {% set varis = printer["gcode_macro _varis"] %}
  {% if varis.drivercurrent_z == 0 %}
    {action_respond_info("Gantry Calibration with micro-stepping...")}
  {% else %}
    {action_respond_info("Gantry Calibration with reduced motor-torque...")}
  {% endif %}

  {% set driverPercentDefault = 69 %}
  {% set mmDefaultRaise = 6 %}
  {% set mmRaise = (mmDefaultRaise+10) if (varis.axis_z_pos_max == 340) else mmDefaultRaise %} 

  _Gantry_Calibration_Mechanical MM_TO_RAISE={mmRaise} Z_ENDPOINT={varis.axis_z_pos_max} DRIVER_PERCENT={driverPercentDefault}

[gcode_macro Gantry_Calibrate]
description: KPA Button. Calibrates the gantry against the z-endstops. This ensures that the gantry is always aligned the same against the bed.
gcode:
  {% set myname = "Gantry_Calibrate" %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% if varis.button_clicked_name != myname %} 
    {action_respond_info("INFO: This levels the gantry against the z-endstops. This ensures that the gantry is always aligned the same against the bed.

    Click this button within 5 seconds again to start.")}

  {% else %} 

    _GAC
  {% endif %}

  _UI_Button_Clicked NAME={myname}

[delayed_gcode _SVZeroSix_Custom_Properties_Set]

initial_duration: 5 
gcode:
  {% set varis = printer["gcode_macro _varis"] %}
  SET_GCODE_VARIABLE MACRO=_varis VARIABLE=able_gantry_calibrate_f VALUE=True

[gcode_macro _PrintStopped_SaveConfig_PrinterSpecific]
gcode:
  PRINT_END

  {% set psv = printer.save_variables.variables %}
  {% if psv.was_interrupted is defined %} SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False {% endif %}
  {% if psv.filepath is defined %} SAVE_VARIABLE VARIABLE=filepath VALUE='""' {% endif %}
  {% if psv.last_file is defined %} SAVE_VARIABLE VARIABLE=last_file VALUE='""' {% endif %}
  {% if psv.power_resume_z is defined %} SAVE_VARIABLE VARIABLE=power_resume_z VALUE=2.0 {% endif %}

[gcode_macro _PPActionFlow_HeatBedInitial_Before_PrinterSpecific]
; Here you can plug in if anything should happen before heating the bed.
gcode:

[gcode_macro _PPActionFlow_HeatBedInitial_After_PrinterSpecific]

gcode:

[gcode_macro _PPActionFlow_FirstHoming_Before_PrinterSpecific]
gcode:

[gcode_macro _PPActionFlow_FirstHoming_After_PrinterSpecific]
gcode:
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}
  {% if varis.able_gantry_calibrate_f and psv.pre_print_gantry_calibrate_f %}

    _GAC
  {% endif %}

[gcode_macro _PPActionFlow_HeatNozzleInitial_Before_PrinterSpecific]
gcode:

[gcode_macro _PPActionFlow_HeatNozzleInitial_After_PrinterSpecific]
gcode:

[gcode_macro _Home_XYZ_IfNotHomed_PrinterSpecific]
gcode:
  {% if not ("xyz" in printer.toolhead.homed_axes) %}
    {action_respond_info("SV06: Homing XYZ...")}
    M84 E 
    G28     
  {% endif %}

[gcode_macro _Home_Z_PrinterSpecific]
gcode:

  {action_respond_info("SV06: Homing Z...")}

  _MoveToZhomeStart
  G28 Z   

[gcode_macro _Gantry_Calibrate_PrinterSpecific]
gcode:

[gcode_macro _PrintStopped_SaveConfig_PrinterSpecific]
gcode:
  PRINT_END 

[gcode_macro CANCEL_PRINT]
description: Cancel the running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
    RUN_SHELL_COMMAND CMD=clear_plr
    clear_last_file
    CANCEL_PRINT_BASE
    _End_Print_KPA MSG="SV06: Best Print Cancelled."

[gcode_macro PAUSE] 
description: KPA: Pause the running print
rename_existing: PAUSE_ORI
gcode:
  RESPOND TYPE=echo MSG="SV06: Pause Print."

  {% set z_raise = params.Z|default(50)|float %} 

  {% set e = params.E|default(0.5) %}        

  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set cur_z = printer.toolhead.position.z|float %}
  {% set target_z = cur_z + z_raise %}
  {% set target_z = target_z if (max_z >= target_z) else max_z %}

  PAUSE_ORI

  {% if printer.extruder.can_extrude|lower == 'true' %}
    {action_respond_info("Retracting: "+e|string+"mm.

    â€¢ Before you resume the print, make sure to extrude enough, so the nozzle is fully loaded with filament.
    â€¢ Wait a few seconds before you remove the hanging filament thread. Then resume the print immediately.")}
    G92 E0 
    G1 E-{e} F3000 

  {% else %}

    RESPOND TYPE=error MSG="Cannot retract - the nozzle temperature is too low."
  {% endif %}

  {% if "xyz" in printer.toolhead.homed_axes %}    
    G1 Z{target_z}

  {% else %}
    RESPOND TYPE=error MSG="Cannot retract - the printer is not homed."
  {% endif %}
  G92 E0 

[gcode_macro RESUME]  
description: KPA: Resume the running print
rename_existing: RESUME_ORI
gcode:
  RESPOND TYPE=echo MSG="SV06: RESUME Print."

  {% set e = params.E|default(0.5) %} 
  {% set e_connect = params.E_CONNECT|default(1.0) %} 

  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY) %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}

  {% if printer.extruder.can_extrude|lower == 'true' %}
    RESUME_ORI {get_params}
    G92 E0 
    G1 E{e_connect} 
    {action_respond_info("Extruding (improve connection to previous layer): "+e_connect|string+"mm.")}
  {% else %}
    RESPOND TYPE=error MSG="Cannot extrude - the nozzle temperature is too low."
  {% endif %}

  G92 E0 

[gcode_macro M600]
gcode:
  RESPOND TYPE=echo MSG="SV06: M600 Filament Change received."

  PAUSE E=0

  G92 E0 
  G1 E-30 F1000 
  RESPOND TYPE=echo MSG="SV06: Unloading Filament."
  G92 E0 

[gcode_macro T0]
gcode:
  RESPOND TYPE=command MSG="Printing with Filament 1..."

[gcode_macro T1]
gcode:
  RESPOND TYPE=command MSG="Printing with Filament 2..."

[gcode_macro T2]
gcode:
  RESPOND TYPE=command MSG="Printing with Filament 3..."

[gcode_macro T3]
gcode:
  RESPOND TYPE=command MSG="Printing with Filament 4..."

[gcode_macro T4]
gcode:
  RESPOND TYPE=command MSG="Printing with Filament 5..."

[gcode_macro T5]
gcode:
  RESPOND TYPE=command MSG="Printing with Filament 6..."

[gcode_macro T6]
gcode:
  RESPOND TYPE=command MSG="Printing with Filament 7..."

[gcode_macro T7]
gcode:
  RESPOND TYPE=command MSG="Printing with Filament 8..."

[gcode_macro T8]
gcode:
  RESPOND TYPE=command MSG="Printing with Filament 9..."

[gcode_macro T9]
gcode:
  RESPOND TYPE=command MSG="Printing with Filament 10..."

[probe]

samples_tolerance: 0.01
samples_tolerance_retries: 3
samples_result: average
samples: 2

[bed_mesh]
speed: 230               

bicubic_tension: 0.2     
fade_start: 1.0          
fade_end: 10             
mesh_pps:2,2             
move_check_distance: 5   
split_delta_z: .025      
algorithm: bicubic       

[safe_z_home]
speed: 200         
z_hop_speed: 12    

[idle_timeout]
gcode:
    RESPOND TYPE=echo MSG="No operations in 15min! Turning off heaters and motors, except Z-motor."
    TURN_OFF_HEATERS
    M84 X Y E 
timeout: 900 

[extruder]
max_extrude_cross_section: 500 

; Correction for Bassa printer.cfg
max_temp: 305

; Corrections for Bassa printer.cfg

[heater_bed]
max_temp: 105

