;  Pre-Print / End-Print
;  Part of CV's Klipper Printer Additions.
;  â€¢ Features:
;  
;
;  â€¢ The Pre-Print module provides the core functionality of what will be done during the phase until the actual print starts:
;    â€¢ Gantry Calibration.
;    â€¢ Creating / loading bed mesh.
;    â€¢ Priming & Cleaning.
;
;
;  â€¢ Together with the mesh-modules, the pre-print module take care of first layer and z-level problems you might have.
;  
;
;  â€¢ The module also provides the shortest possible time to start a print, and the nozzle doesn't ouze.
;    In more detail:
;    â€¢ Fast heating of the bed with 100% power to the target temperatur (no long settling).
;      The nozzle pre-heats, but to a lower temperature, to prevent ouzing.
;      When the bed is getting closer to it's target temperature, the nozzle starts full heating, and reaches it's target temperature at the same time the bed does.
;      (Not possible if the adaptive-mesh mode is used.)
;      (If gantry-calibrate is active, it depends on how long it needs to finish).
;    
;
;  â€¢ Various
;    â€¢ The bed / extruder wiggle a bit, when they reached temperature. Fast moves of the bed / extruder then follow. This is an announcement to the user, in case he/she has hands on the printer.
;    
;    â€¢ Homes Z on the warm bed, to get the right z-level on the temperature-warped bed.
;    

;  â€¢ End-Print
;    â€¢ After printing, the head drives into park position, and lifts up by 60 mm (if enough space), presents the print, turns off the extruder, bed, motors & fans.
;      To use this, put into your slicer's end-g-code "_End_Print" (note the leading underscore).
;    
;      
;      
;  â€¢â€¢â€¢â€¢ Support
;  â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢
;    If my work supports you, you might like to support me too.
;  â€¢ PayPal: https://www.paypal.com/paypalme/Morgennebel/
;    
;    
;    When you buy something, please use my Referal-Link, at no additional cost:
;  â€¢ AliExpress: https://s.click.aliexpress.com/e/_De0Vu1h
;  â€¢ Amazon: https://amzn.to/3L35OX2
;    
;    Thank you!
;    Christian ðŸ™‚

[delayed_gcode _startup_check_pre_print]
initial_duration: 2.01 
gcode:

  {% set module_version = "3.0b4" %} 
  _Module_loaded_add NAME="Pre-Print" VERSION="{module_version}"

[gcode_macro _Pre_Print_Procedure]
gcode:

  _LgCoordinates MSG="Init"

  CLEAR_PAUSE 

  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% set g_mesh_name = "unset" %}

  {% set will_gantry_calibrate_f = True if (varis.able_gantry_calibrate_f and psv.pre_print_gantry_calibrate_f) else False %}

  {% if params.BED_TEMP is not defined %}
    RESPOND TYPE=error MSG="Error: Parameter BED_TEMP is missing from the slicer. The bed will not heat. Please read the Slicer Setup Guide."
    {% set bedFL = -1 %}
    _Exit_By_Provoked_Error
  {% else %}
    {% set bedFL = params.BED_TEMP|float %}
  {% endif %}

  {% if params.EXTRUDER_TEMP is not defined %}
    RESPOND TYPE=error MSG="Error: The nozzle will not heat since the parameter EXTRUDER_TEMP is missing from the slicer. Please read the Slicer Setup Guide."
    {% set extFL = -1 %}
    _Exit_By_Provoked_Error
  {% else %}
    {% set extFL = params.EXTRUDER_TEMP|float %}
  {% endif %}

  {% set filamentType = params.FILA_TYPE|default("none")|string %}

  {% if filamentType == "none" %}
    RESPOND TYPE=command MSG="Note: The Priming feature misses the parameter \"FILA_TYPE\" from the slicer. Please read the Slicer Setup Guide, how to add the \"FILA_TYPE\" parameter to your start-g-code."
  {% endif %}

  {% set localSlicer_PrintModelHeight = 0 %} 

  {% if (params.MODEL_H is defined) %} 

    {% set localSlicer_PrintModelHeight = params.MODEL_H|float %}

  {% else %}

    {% if (params.LAYER_C is not defined) or (params.LAYER_H is not defined) %} 
      RESPOND TYPE=command MSG="Note: The Print-Slow-Down feature misses a parameter from the slicer. Thus you need to input the height of the model in the button-dialog. Please read the Slicer Setup Guide, how to insert the parameter into your slicer."

    {% else %}

      {% set localSlicer_PrintModelHeight = (params.LAYER_C|float * params.LAYER_H|float) %}

    {% endif %}
  {% endif %}
  SET_GCODE_VARIABLE MACRO=_varis VARIABLE=print_slowdown_heightend_slicer VALUE={localSlicer_PrintModelHeight}

  {% set area_x_start = -100 %}
  {% set area_y_start = -100 %}
  {% set area_x_end = -100 %}
  {% set area_y_end = -100 %}

  {% if params.AREA_START is defined and params.AREA_END is defined %}

    {% set area_x_start = params.AREA_START.split(",")[0]|float %}
    {% set area_y_start = params.AREA_START.split(",")[1]|float %}
    {% set area_x_end = params.AREA_END.split(",")[0]|float %}
    {% set area_y_end = params.AREA_END.split(",")[1]|float %}
  {% else %}
    {% if psv.pre_print_mesh_mode == "adaptive" or psv.pre_print_prime_line == "adaptive" or psv.pre_print_prime_spiral == "adaptive" %}
      {% set m_insert = "\"AREA_START\"" if params.AREA_START is not defined else "" %}
      {% set m_insert = m_insert + " \"AREA_END\"" if params.AREA_END is not defined else m_insert %}

      RESPOND TYPE=error MSG="Note: Adaptive Mesh & Priming will not work since parameters from the slicer are missing: {m_insert}. Please have a look into the Slicer Setup Guide, how to insert them into your slicer." {% endif %}

  {% endif %}

  {% set nozDia = params.NOZ_DIA|default(0)|float %}
  {% if (nozDia == 0) and (varis.nozzle_diameter == 0) %} 
    RESPOND TYPE=command MSG="Note: The Priming feature misses the parameter \"NOZ_DIA\" from the slicer. Please read the Slicer Setup Guide, how to add the \"NOZ_DIA\" parameter to your start-g-code."
  {% elif nozDia > 0 %}
    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=nozzle_diameter VALUE={nozDia}

  {% endif %}

  {% if bedFL > varis.temperature_bed_max %} RESPOND TYPE=error MSG="Note: Got a too high bed temperature from the slicer: {bedFL}Â°C. Reducing it 3Â°C below the printer's maximum temperature of {varis.temperature_bed_max}Â°C, to avoid an ADC error." {% endif %}
  {% if extFL > varis.temperature_nozzle_max %} RESPOND TYPE=error MSG="Note: Got a too high nozzle temperature from the slicer: {extFL}Â°C. Reducing it 5Â°C below the printer's maximum temperature of {varis.temperature_nozzle_max}Â°C, to avoid an ADC error." {% endif %}

  {% set bedFL = (varis.temperature_bed_max-3) if bedFL > (varis.temperature_bed_max-3) else bedFL %}

  {% set temp_bed_overshoot = bedFL + (bedFL-printer.heater_bed.temperature) %}
  {% set temp_bed_overshoot = bedFL if temp_bed_overshoot < bedFL else temp_bed_overshoot %}

  {% set temp_bed_overshoot = bedFL*1.10 if temp_bed_overshoot > (bedFL*1.10) else temp_bed_overshoot %}

  {% set temp_bed_overshoot = (varis.temperature_bed_max-3) if temp_bed_overshoot > (varis.temperature_bed_max-3) else temp_bed_overshoot %}

  {% set temp_bed_overshoot_slight = bedFL*1.01 %}

  {% set temp_bed_overshoot_slight = (varis.temperature_bed_max-3) if temp_bed_overshoot_slight > (varis.temperature_bed_max-3) else temp_bed_overshoot_slight %}

  SET_GCODE_VARIABLE MACRO=_varis VARIABLE=bed_temp VALUE={bedFL}

  {% set extFL = (varis.temperature_nozzle_max-5) if extFL > (varis.temperature_nozzle_max-5) else extFL %}

  {% set temp_nozzle_preheat = extFL*0.69 %}

  {% set temp_nozzle_overshoot = extFL + (extFL-printer.extruder.temperature) %}

  {% set temp_nozzle_overshoot = extFL*1.05 if temp_nozzle_overshoot > (extFL*1.05) else temp_nozzle_overshoot %}

  {% set temp_nozzle_overshoot = (varis.temperature_nozzle_max-5) if temp_nozzle_overshoot > (varis.temperature_nozzle_max-5) else temp_nozzle_overshoot %}

  {% set temp_nozzle_overshoot_slight = extFL*1.01 %}

  {% set temp_nozzle_overshoot_slight = (varis.temperature_nozzle_max-5) if temp_nozzle_overshoot_slight > (varis.temperature_nozzle_max-5) else temp_nozzle_overshoot_slight %}

  {% if psv.print_is_running_f and psv.was_interrupted %}
    SAVE_VARIABLE VARIABLE=print_is_running_f VALUE=False

    RESPOND TYPE=error MSG="KPA: RESUMING PRINT DETECTED..."

    {% if 1 == 1 %}

      M104 S{extFL}

      _HeatFast_Wait_Nozzle TEMPTARGET={extFL} TEMPMIN={extFL*0.95} TEMPMAX={extFL*1.05} MSG="Waiting for min/max nozzle print temperature of {"%.1f"|format(extFL*0.95|float)}Â°C / {"%.1f"|format(extFL*1.05|float)}Â°C..."
      RESPOND TYPE=command MSG="Ready to print: Nozzle."
    {% endif %}

    {% if psv.pre_print_mesh_mode == "multiple" %}
      {% set mesh_name_saved = psv.pre_print_mesh_name %}
      BED_MESH_PROFILE LOAD={mesh_name_saved}
      RESPOND TYPE=command MSG="Mesh loaded: {mesh_name_saved}"
      SET_GCODE_VARIABLE MACRO=_varis VARIABLE=meshloadcount VALUE=1

    {% elif psv.pre_print_mesh_mode == "adaptive" %} 
      BED_MESH_PROFILE LOAD="Adaptive"
      RESPOND TYPE=command MSG="Mesh loaded: Adaptive"
    {% endif %}

  {% else %}
    _PPActionFlow_PrintStart_Init_Before

    M106 S0 
    M107    

    M104 S0 
    M140 S0 

    G90     

    G92 E0 

    _PPActionFlow_PrintStart_Init_After

    {action_respond_info(" ")}

    _PPActionFlow_PrintStartTextOutput_Before

    {% set pinfo = "" %}

    {% set pinfo = pinfo + "Just another best print of my life, with:\n" %}

    {% set pinfo = pinfo + "â€¢ "+bedFL|string+"Â°C Bed, "+extFL|string+"Â°C Nozzle.\n" %}
    {% if printer.configfile.config.bltouch.z_offset is defined %}
      {% set pinfo = pinfo + "â€¢ "+printer.configfile.config.bltouch.z_offset|string+": Z-Offset.\n" %}
    {% endif %}

    {% set pinfo = pinfo + "â€¢ ADAPTIVE: Bed Mesh\n" if psv.pre_print_mesh_mode == "adaptive" else pinfo %}

    {% set pinfo = pinfo + "â€¢ MULTIPLE: Bed Mesh\n" if psv.pre_print_mesh_mode == "multiple" else pinfo %}

    {% if varis.will_print_slowdown_f %}

      {% set m_heightend   = localSlicer_PrintModelHeight|string if localSlicer_PrintModelHeight > 0 else (varis.print_slowdown_heightend|string)+" mm" %}

      {% set m_heightstart = "Automatic" if varis.print_slowdown_heightstart == "auto" else (varis.print_slowdown_heightstart|round(1)|string)+" mm" %}

      {% set m_percent     = "Automatic" if varis.print_slowdown_percent     == "auto" else (varis.print_slowdown_percent|string)+" %" %}

      {% set pinfo = (pinfo + "â€¢ ON: Print Slow In Height
      ....Start-Height: "+m_heightstart+"
      ......End-Height: "+m_heightend+"
      .......End-Speed: "+m_percent+"\n") %}
    {% endif %}

    {% set pinfo = (pinfo + "â€¢ ON: Gantry-Calibrate.\n") if will_gantry_calibrate_f else (pinfo + "â€¢ OFF: Gantry-Calibrate.\n") %}
    {% set pinfo = pinfo + "â€¢ ON: Samurai Move\n" if psv.pre_print_prime_samurai_f else pinfo %}
    {% set pinfo = pinfo + "â€¢ ON: Prime Slow\n" if psv.pre_print_prime_slow_f else pinfo %}

    {% set pinfo = pinfo + "â€¢ "+psv.pre_print_prime_line.upper()+": Prime Line.\n" if psv.pre_print_prime_line != "off" else pinfo %}
    {% set pinfo = pinfo + "â€¢ "+psv.pre_print_prime_spiral.upper()+": Prime Spiral.\n" if psv.pre_print_prime_spiral != "off" else pinfo %}
    {% set pinfo = pinfo + "â€¢ ON: Move To Cleaning Position.\n" if psv.pre_print_moves_cleaning_f else pinfo %}

    {action_respond_info(pinfo)}

    _PPActionFlow_PrintStartTextOutput_After

    _Fan_Start_CPU    

    {% if psv.pre_print_mesh_mode == "multiple" %}
      _Mesh_Load_Create_Save BED_TEMP={bedFL} MESH_NAME="multiple" WILL_GANTRY_CALIBRATE={will_gantry_calibrate_f}
    {% endif %}

    _Fan_Start_Hotend 

    _PPActionFlow_HeatBedInitial_Before
    _PPActionFlow_HeatBedInitial TEMP_BED={bedFL} TEMP_BED_OVERSHOOT={temp_bed_overshoot}  TEMP_BED_OVERSHOOT_SLIGHT={temp_bed_overshoot_slight}  
    _PPActionFlow_HeatBedInitial_After

    _PPActionFlow_FirstHoming_Before
    _Home_XYZ_IfNotHomed

    _Move_Speed_Set MMS={varis.move_mms_norm}

    _PPActionFlow_FirstHoming_After

    {% if psv.debugf %}
      {% if psv.pre_print_primeline_remove == "method-a" %}
        _Prime_Line_Front_Remove_A
        {% if (not psv.pre_print_moves_cleaning_f) and (not will_gantry_calibrate_f) %}
          _MoveToZhomeStart 
        {% endif %}
      {% endif %}
    {% endif %}

    _PPActionFlow_HeatNozzleInitial_Before
    RESPOND TYPE=command MSG="Preheating nozzle to {"%.1f"|format(extFL*0.69|float)}Â°C, to prevent ouzing."
    _PPActionFlow_HeatNozzleInitial TEMP_NOZZLE={temp_nozzle_preheat} 
    _PPActionFlow_HeatNozzleInitial_After

    _MoveToCleaningNozzleBedPosition Z=60 MSG="Opportunity to clean the nozzle / bed..." 

    {% if (not psv.pre_print_moves_cleaning_f) and will_gantry_calibrate_f %}
      _MoveToGantryCalibrateStartPosition
    {% endif %}

    {% if "adaptive" == psv.pre_print_mesh_mode %}

      {% set pre = "Gantry-calibrate / " if will_gantry_calibrate_f else "" %}
      _HeatFast_Wait_Bed TEMPTARGET={bedFL} TEMPMIN={bedFL*0.97} TEMPMAX={bedFL*1.03} MSG="{pre}Create Adaptive Mesh: Waiting for min/max bed temperature of {"%.1f"|format(bedFL*0.97|float)}Â°C / {"%.1f"|format(bedFL*1.03|float)}Â°C..."

      _Move_Announce_User_Wiggle XYZ="y" FREQUENCY=0.1 DURATION=1 SPEED=300

      {% if will_gantry_calibrate_f %}

        _Gantry_Calibrate
      {% endif %}

      _Home_Z

      {% set areastart = params.AREA_START|default("0,0") %}
      {% set areaend   = params.AREA_END|default("0,0") %}

      BED_MESH_CALIBRATE PROFILE="Adaptive" AREA_START={areastart} AREA_END={areaend} 

      _MoveToXYmin 

    {% elif psv.pre_print_mesh_mode == "multiple" %}

      {% set pre = "Gantry-calibrate: " if will_gantry_calibrate_f else "Home-Z: " %}
      _HeatFast_Wait_Bed TEMPTARGET={bedFL} TEMPMIN={bedFL*0.85} TEMPMAX={bedFL*1.05} MSG="{pre}Waiting for min/max bed temperature of {"%.1f"|format(bedFL*0.85|float)}Â°C / {"%.1f"|format(bedFL*1.05|float)}Â°C..."

      _Move_Announce_User_Wiggle XYZ="y" FREQUENCY=0.1 DURATION=1 SPEED=300

      {% if will_gantry_calibrate_f %}
        M140 S{temp_bed_overshoot_slight} 
        _MoveToGantryCalibrateStartPosition
        _Gantry_Calibrate
      {% endif %}

      _Home_Z

      {% if psv.pre_print_moves_cleaning_f %}
        _MoveToCleaningNozzleBedPosition Z=60 MSG="2nd opportunity to clean the nozzle / bed..." 
      {% else %}
        _MoveToXYmin
      {% endif %}

      _HeatFast_Wait_Bed TEMPTARGET={bedFL} TEMPMIN={bedFL*0.87} TEMPMAX={bedFL*1.05} MSG="Nozzle heating: Waiting for min/max bed temperature to become {"%.1f"|format(bedFL*0.87|float)}Â°C / {"%.1f"|format(bedFL*1.05|float)}Â°C......"

      _HeatFast_Wait_Nozzle TEMPTARGET={extFL} TEMPMAX={extFL*1.05} MSG="Heating nozzle with full power... " 

      M104 S{temp_nozzle_overshoot}

      _HeatFast_Wait_Bed TEMPTARGET={bedFL} TEMPMIN={bedFL*0.97} MSG="Waiting for minimum bed temperature of {"%.1f"|format(bedFL*0.97|float)}Â°C..."

      M104 S{temp_nozzle_overshoot_slight}

      _HeatFast_Wait_Bed TEMPTARGET={bedFL} TEMPMAX={bedFL*1.05} MSG=""

      RESPOND TYPE=command MSG="Ready to print: Bed."

      _Move_Announce_User_Wiggle XYZ="y" FREQUENCY=0.5 DURATION=1 SPEED=100

    {% endif %}

    {% if 1 == 1 %}

      _HeatFast_Wait_Nozzle TEMPTARGET={extFL} TEMPMIN={extFL*0.95} TEMPMAX={extFL*1.05} MSG="Waiting for min/max nozzle print temperature of {"%.1f"|format(extFL*0.95|float)}Â°C / {"%.1f"|format(extFL*1.05|float)}Â°C..."

      RESPOND TYPE=command MSG="Ready to print: Nozzle."
      _Move_Announce_User_Wiggle XYZ="x" FREQUENCY=0.1 DURATION=1.2 SPEED=300

      _Move_Speed_Set MMS={varis.move_mms_norm}

      {% if psv.pre_print_prime_samurai_f %} _Prime_Samurai_Move {% endif %}

      _Move_Speed_Set MMS={varis.move_mms_norm}

      {% if psv.pre_print_prime_line in ("left", "front", "right") %} _Prime_Line FILAMENT_TYPE={filamentType} {% endif %}

      _Move_Speed_Set MMS={varis.move_mms_norm}

      {% if psv.pre_print_prime_spiral in ("adaptive", "left", "right") %}
        _Prime_Spiral FILAMENT_TYPE={filamentType} AREA_X_START={area_x_start} AREA_Y_START={area_y_start} AREA_X_END={area_x_end} AREA_Y_END={area_y_end}
      {% endif %}

      {% if (area_x_start +0) != -100 and (area_y_start +0) != -100 %} # If we have the exact coordinates of the model's print-start. +0: Test that it's a number. See bug below.
        RESPOND TYPE=command MSG="Driving fast to the print-start position, to prevent ouzing."
        G1 X{area_x_start} Y{area_y_start} 
      {% else %} 
        RESPOND TYPE=command MSG="Driving fast to the middle of the bed, to prevent ouzing."
        G1 X{varis.axis_x_pos_max/2} Y{varis.axis_y_pos_max/2}
      {% endif %}

      _Move_Speed_Set MMS=30

      RESPOND TYPE=command MSG="Pre-print procedure done."

      SAVE_VARIABLE VARIABLE=print_is_running_f VALUE=True

    {% endif %}
  {% endif %} 

  {% if 1 == 1 %}

    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=meshloadcount VALUE=1
    UPDATE_DELAYED_GCODE ID=_Bed_Mesh_Load DURATION=0.3 

    {% if printer["gcode_macro Print_Slow_In_Height"] is defined %}

      {% if varis.will_print_slowdown_f %}
        RESPOND TYPE=error MSG="Starting _Watcher_Print_Slow_In_Height"
        UPDATE_DELAYED_GCODE ID=_Watcher_Print_Slow_In_Height DURATION=10
      {% endif %}
    {% endif %}

    {% if printer["gcode_macro Print_Pause_In_Heights"] is defined %}
      {% if (printer["gcode_macro _varis_Print_Pause_In_Heights"].pause_point_list|length > 0) %}
        RESPOND TYPE=error MSG="Starting _Watcher_Print_Pause_In_Heights"
        UPDATE_DELAYED_GCODE ID=_Watcher_Print_Pause_In_Heights DURATION=6
      {% endif %}    
    {% endif %}

  {% endif %}

[gcode_macro _End_Print]
gcode:

  SAVE_VARIABLE VARIABLE=print_is_running_f VALUE=False

  {% if printer["gcode_macro _End_Print_PrinterSpecific"] is defined %}
    _End_Print_PrinterSpecific
  {% else %}
    _End_Print_KPA
  {% endif %}

[gcode_macro _End_Print_KPA]
gcode:

  SAVE_VARIABLE VARIABLE=print_is_running_f VALUE=False
  {% set varis = printer["gcode_macro _varis"] %}

  {% set m = params.MSG|default("")|string%}

  M106 S0 
  M107    
  M104 S0 
  M140 S0 
  TURN_OFF_HEATERS 
  BED_MESH_CLEAR 

  {% if ("xyz" in printer.toolhead.homed_axes) %} 
    {% set curX = printer.toolhead.position.x %}
    {% set curY = printer.toolhead.position.y %}
    {% set curZ = printer.toolhead.position.z %}

    G92 E0                    
    G1 E-1 F{20*60}

    {% set tarZ = curZ+0.2 if (curZ+0.2 < varis.axis_z_pos_max) else curZ %}
    G1 E-1 Z{tarZ} F{20*60}

    _Move_Speed_Set MMS={varis.move_mms_max}
    {% set tarX = curX+5 if (curX+5 < varis.axis_x_pos_max) else curX-5 %}
    {% set tarY = curY+5 if (curY+5 < varis.axis_y_pos_max) else curY-5 %}
    G1 X{tarX} Y{tarY} 

    G1 E-1 F{2*60}            

    {% set tarZ = curZ+60 if (curZ+60 < varis.axis_z_pos_max) else (varis.axis_z_pos_max) %}
    G1 Z{tarZ} F{20*60}

    _Move_Speed_Set MMS={varis.move_mms_norm}
    G1 X5 Y{varis.axis_y_pos_max-1} 
  {% endif %}

  M84 X Y Z E 

  {% if m == "" %}
    {action_respond_info("Best Print of my life finished.")}
  {% else %}
    {action_respond_info(m)}
  {% endif %}

[gcode_macro _Mesh_Load_Create_Save]
gcode:

  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}
  {% set mesh_name               = params.MESH_NAME|default("nix")|string %}
  {% set bedFL                   = params.BED_TEMP|default(-1)|float %}
  {% set will_gantry_calibrate_f = params.WILL_GANTRY_CALIBRATE|default(True) %} 

  {% set will_gantry_calibrate_f = True if will_gantry_calibrate_f|string == "True" else False %}

  {% set createF = False %}
  {% if mesh_name == "nix" %} RESPOND TYPE=error MSG="Mesh name not set." {% endif %}

  {% set mesh_name = "Mesh_" %}

  {% if will_gantry_calibrate_f %} 

    {% set mesh_name = mesh_name + "GAC_" %} 
  {% else %}

    {% set mesh_name = mesh_name + "NOC_" %} 
  {% endif %}

  {% set bedFL_rounded = ((((bedFL+0.1)/10)|round(0)|int)*10)|int %} 
  {% set bedFL = bedFL_rounded %}

  {% if bedFL < 100 %}
    {% set mesh_name = mesh_name + "0" + bedFL_rounded|string %}
  {% else %}
    {% set mesh_name = mesh_name + bedFL_rounded|string %}
  {% endif %}

  {% set meshPointX = varis.mesh_probe_point_count_x %}
  {% set meshPointY = varis.mesh_probe_point_count_y %}
  {% set meshPoint_str_X = ("0" + meshPointX|string) if (meshPointX < 10) else meshPointX|string %}
  {% set meshPoint_str_Y = ("0" + meshPointY|string) if (meshPointY < 10) else meshPointY|string %}
  {% set mesh_name = mesh_name + "_" + meshPoint_str_X + "x" + meshPoint_str_Y %}

  SAVE_VARIABLE VARIABLE=pre_print_mesh_name VALUE='"{mesh_name}"'

  {% if printer.bed_mesh.profiles[mesh_name] is not defined %}
    {% set createF = True %}

  {% else %}

  {% endif %}

  {% if createF %}
    M104 S0 
    {% set m_gac = "ON" if will_gantry_calibrate_f else "OFF" %}

    {action_respond_info("No proper bed mesh found. Creating & saving bed mesh...
    ....Bed Temperature: "+bedFL_rounded|string+"Â°C
    ...Gantry Calibrate: "+m_gac+"
    Mesh Probe Points X: "+meshPointX|string+"
    Mesh Probe Points Y: "+meshPointY|string+"
    ...............Name: "+mesh_name)}

    _Home_XYZ_IfNotHomed

    {% set overheat = (bedFL+10) if ((bedFL+10) < varis.temperature_bed_max) else  (varis.temperature_bed_max -1) %}
    M140 S{overheat}
    RESPOND TYPE=command MSG="Waiting for min/max bed temperature of {"%.1f"|format(bedFL*0.99|float)}Â°C / {"%.1f"|format(bedFL*1.02|float)}Â°C..."
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bedFL*0.99}
    M140 S{bedFL*1.01}
    {% if bedFL >= 40 %} 
    	TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM={bedFL*1.02} 
    {% endif %}
    M140 S{bedFL}

    _Move_Announce_User_Wiggle XYZ="y" FREQUENCY=0.1 DURATION=1 SPEED=300

    {% if will_gantry_calibrate_f %}
      _Gantry_Calibrate
      _Home_Z
    {% endif %}

    BED_MESH_CALIBRATE PROFILE={mesh_name} 

    _PrintStopped_SaveConfig MSG="Bed mesh saved. Klipper will restart."
    _Exit_By_Provoked_Error

  {% else %}
    RESPOND TYPE=command MSG="A proper mesh was found. Loading mesh '{mesh_name}'."
    BED_MESH_PROFILE LOAD={mesh_name}
  {% endif %}

[delayed_gcode _Bed_Mesh_Load] 
gcode:
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}
  {% set meshloadcountdesired = 4 %} 

  {% if (varis.meshloadcount > 0) and (varis.meshloadcount < (meshloadcountdesired+1)) %}

    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=meshloadcount VALUE={varis.meshloadcount +1}

    BED_MESH_PROFILE LOAD={psv.pre_print_mesh_name}

    UPDATE_DELAYED_GCODE ID=_Bed_Mesh_Load DURATION=0.6 

  {% else %}

    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=meshloadcount VALUE=0
  {% endif %}