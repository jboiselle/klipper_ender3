;  Calibration Tools
;  Part of CV's Klipper Printer Additions.
;  
;  
;  â€¢â€¢â€¢â€¢ Support
;  â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢
;    If my work supports you, you might like to support me too.
;  â€¢ PayPal: https://www.paypal.com/paypalme/Morgennebel/
;    
;    
;    When you buy something, please use my Referal-Link, at no additional cost:
;  â€¢ AliExpress: https://s.click.aliexpress.com/e/_De0Vu1h
;  â€¢ Amazon: https://amzn.to/3L35OX2
;    
;    Thank you!
;    Christian ðŸ™‚

[delayed_gcode _startup_check_tools_calibration]
initial_duration: 2.05
gcode:

  {% set module_version = "3.0b4 M:b2" %} 
  _Module_loaded_add NAME="Tools : Calibration / Preparation" VERSION="{module_version}"

  {% set psv = printer.save_variables.variables %}

  {% if psv.calib_bedfinalizer_heatingcyclestotal is not defined %}
    SAVE_VARIABLE VARIABLE=calib_bedfinalizer_heatingcyclestotal  VALUE=0
  {% endif %}

[gcode_macro Calib_PID] 
description: KPA Button. This will run the PID calibration for the heaters of the extruder / bed.
gcode:
  {% set myname = "Calib_PID" %}
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% set bedtemp = params.BED_TEMPERATURE|default(0)|int %}
  {% set noztemp = params.NOZZLE_TEMPERATURE|default(0)|int %}

  {% if printer.configfile.config.extruder.control is not defined %}
    {action_respond_info("Your printer has not defined PID Control for the extruder.")}

  {% elif printer.configfile.config.heater_bed.control is not defined %}
    {action_respond_info("Your printer has not defined PID Control for the bed.")}

  {% elif printer.configfile.config.extruder.control != "pid" %}
    {action_respond_info("Your printer does not support PID Control for the extruder.")}

  {% elif printer.configfile.config.heater_bed.control != "pid" %}
    {action_respond_info("Your printer does not support PID Control for the bed.")}

  {% else %}

    {% set bedtempmax = printer.configfile.config.heater_bed.max_temp|int %}
    {% set noztempmax = printer.configfile.config.extruder.max_temp|int %}
    {% set noztempcomp = 230 %} 
    {% set bedtempcomp = 70 %} 

    {% if varis.button_clicked_name != myname %}

      {% if bedtemp > 0 %}
        {% if bedtemp > (bedtempmax-5) %}
          {action_respond_info("NOTE:
          You've chosen a temperature ("+bedtemp|string+"Â°C) close to the maximum temperature ("+bedtempmax|string+"Â°C).
          You might get a shutdown with an \"ADC out of range\" error.
          If so, chose a lower temperature next time.")}
        {% endif %}

        {action_respond_info("START:
        Bed PID Calibration at "+bedtemp|string+"Â°C...
        The bed will heat & cool down several times.
        Be patient, this may take a longer time.")}
        PID_CALIBRATE HEATER=heater_bed TARGET={bedtemp}
      {% endif %}

      {% if noztemp > 0 %}
        {% if noztemp > (noztempmax*0.95) %}
          {action_respond_info("NOTE:
          You've chosen a temperature ("+noztemp|string+"Â°C) close to the maximum temperature ("+noztempmax|string+"Â°C).
          You might get a shutdown with an \"ADC out of range\" error.
          If so, chose a lower temperature next time.")}
        {% endif %}

        {action_respond_info("START:
        Nozzle PID Calibration at "+noztemp|string+"Â°C...
        The nozzle will heat & cool down several times.
        Be patient, this may take a longer time.")}

        M104 S{noztemp} 
        PID_CALIBRATE HEATER=extruder TARGET={noztemp}
      {% else %}

        {action_respond_info("INFO:
        This executes the PID Calibration for the heaters/sensors of the nozzle/bed.
        PID-control allows for fast heating, and a smooth hold of the target temperature.

        HOW TO:
        1) Enter the desired target temperature in the input field to calibrate the desired heater.
        Chose the temperature you are mostly printing with.

        2) When the calibration is done, you can safe the data by clicking \"SAVE_CONFIG\".

        SHORTCUT
        A double click on the button will...
        ... run the PID Calibration with default values (bed: "+bedtempcomp|string+"Â°C, nozzle "+noztempcomp|string+"Â°C)
        ... save the PID parameter values to printer.cfg
        ... restart the printer
        ")}

      {% endif %}

    {% else %}

      {action_respond_info("START:
      Automated PID Calibration for the nozzle & bed...

      Calibration might take a longer time, be patient.

      When finished the values will be saved and the printer restarts.

      ...Bed Test Temperature: "+bedtemp|string+"Â°C
      Nozzle Test Temperature: "+noztemp|string+"Â°C
      ")}

      PID_CALIBRATE HEATER=heater_bed TARGET={bedtemp}

      M104 S{noztemp} 
      PID_CALIBRATE HEATER=extruder TARGET={noztemp}
      SAVE_CONFIG
    {% endif %}

  {% endif %}

  _UI_Button_Clicked NAME={myname}

[gcode_macro Calib_Input_Shaper]

description: This executes the Input Shaper calibration procedure.
gcode:
  {% set x_or_y = params.X_OR_Y_AXIS|default("asdf")|string %}

  {% set myname = "Calib_Input_Shaper_X_Axis" %}
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% if printer.configfile.config.input_shaper is not defined %}
    {action_respond_info("This printer does not support Input Shaping.")}

  {% else %}

    {% if x_or_y.lower() == "x" %}
      {action_respond_info("START:
      Input Shaper Calibration on the X axis...

      This may be quite noisy, that's normal.

      Calibration might take some minutes, be patient.")}
      _Home_XYZ_IfNotHomed
      SHAPER_CALIBRATE AXIS="X"

    {% elif x_or_y.lower() == "y" %}
      {action_respond_info("START:
      Input Shaper Calibration on the Y axis...

      This may be quite noisy, that's normal.

      Calibration might take some minutes, be patient.")}
      _Home_XYZ_IfNotHomed
      SHAPER_CALIBRATE AXIS="Y"

    {% elif varis.button_clicked_name != myname %}

      {action_respond_info("INFO:
      This executes the Input Shaper calibration procedure. Refer to your printer's manual - you might need to install a sensor to run this successfully.

      Input Shaping cancels out vibrations during printing, to supress visible repeating patterns on the print model, known as ringing / ghosting / rippling.

      HOW TO:
      1) Enter \"X\" or \"Y\" in the input field to calibrate the desired axis.

      2) When both axis are calibrated you can safe the data by clicking \"SAVE_CONFIG\".

      SHORTCUT
      If your printer has both sensors permanently installed you can just double click this button. This will run calibration for both axis & save & restart.")}

    {% else %}
      {action_respond_info("START:
      Input Shaper Calibration on the X and Y axis...

      This may be quite noisy, that's normal.

      Calibration might take some minutes, be patient.

      When finished the values will be saved and the printer restarts...")}

      _Home_XYZ_IfNotHomed
      SHAPER_CALIBRATE AXIS="X"
      SHAPER_CALIBRATE AXIS="Y"
      SAVE_CONFIG
    {% endif %}

  {% endif %}

  _UI_Button_Clicked NAME={myname}

[gcode_macro Calib_Bed_Finalizer]
description: KPA Button. This executes a method to finalise the shape of the bed.
variable_lasttemp:0
gcode:
  {% set myname = "Calib_Bed_Finalizer" %}
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% if varis.button_clicked_name != myname and varis.bed_prime_count == -1 %} 
    {action_respond_info("Bed Finalizer - Heat Cycles Total: "+psv.calib_bedfinalizer_heatingcyclestotal|string+"

    INFO:
    I'm not entirely sure if this is true entirely / partly / not at all.

    The idea is to execute a heat-cool-down-procedure to \"finalise\" the shapes of the print bed's metal under raising temperatures. As metal bends and \"moves\" under temperature, it helps to let the atomic structure settle, to a more and more stable configuration that reacts at rising temperatures always the same (nearly, and hopefully).

    However, the question is if that happens in the temperature-range of 30-100Â°C. For several hundred degrees metal does this for sure.

    So this needs a testing procedure, to check if this is a useful function.

    â€¢ Preferably test with a brand new bed, that had no / not much heat cycles to settle.
    â€¢ Preferably set the bed mesh density to 19 mm (button \"Mesh Probe Point Distance\"), to see differences better.
    â€¢ Make very sure Gantry Calibration is ON.
    â€¢ During the ENTIRE test period, the printer must not be moved, and no adjustments to the mechanics / z-level must be made.

    1) Create all meshes from 20-100Â°C with the button \"Mesh Create All Temperatures\".
    2) Open printer.cfg and append \"_01\" to the mesh-names, to indicate this is the first series of test-meshes.
    Use in Mainsail's editor the search & replace function. In example, if your meshes have 16x16 probe points, then search \"_16x16]\" and replace with \"_16x16 01]\". 
    3) Run the Bed Finalizer.

    â€¢ Repeat step 1.
    â€¢ Repeat step 2, adding \"_02\" to the names.
    â€¢ Compare the meshes of series 1 and 2. Is there a difference?
    â€¢ Maybe running the Bed Finalizer one time (which is 10 heating cycles) is not enough, so the process could be several times repeated, until it is clear that...
    ...a) it has no effect.
    ...b) it needs more heating cycles (until the bed shapes no longer do change).

    HOW TO:
    Click this button within 5 seconds again to start.

    â€¢ The procedure will run a longer time. It will heat the bed fully, and let it cool down fully, 10x in a row.
    â€¢ While it runs the bed will vibrate from time to time. This can result in an \"Timer too close\" error, as a lot of commands are send. I will try to reduce the likelyhood of this error.
    â€¢ You will get notifications in the console about the progress.
    â€¢ You may cancel by clicking this button during the procedure runs.
    â€¢ If you cancel, or if you get a \"Timer too close\" error, there's a Total Heat Cycle Count recorded. Create a new series of bed meshes after every 10 total heat cycles.
    â€¢ The bed will run at it's maximum temperature. Never let your printer run unattendend.

    ")}

  {% elif varis.button_clicked_name != myname and varis.bed_prime_count > -1 %}
      {action_respond_info("Bed Finaliser is running. To cancel, click this button again within 5 seconds.")}

  {% else %} 
    {% if varis.bed_prime_count > -1 %} 
      M140 S0
      SET_GCODE_VARIABLE MACRO=_varis VARIABLE=bed_prime_count VALUE=-1
      RESPOND TYPE=command MSG="Bed Finalizer: CANCELLED (by button)"

    {% else %}
      {action_respond_info("START:
      Bed Finalizer...

      The bed will make noise from time to time.

      To cancel the whole process, double click this button again.")}
      SET_GCODE_VARIABLE MACRO=_varis VARIABLE=bed_prime_count VALUE=0
      M140 S{varis.temperature_bed_max - 1}
      _Home_XYZ_IfNotHomed

      _Move_Speed_Set MMS={varis.move_mms_max} 
      G1 Z50

      UPDATE_DELAYED_GCODE ID=_Bed_Finalizer_Timer DURATION=3

    {% endif %}
  {% endif %}

  _UI_Button_Clicked NAME={myname}

[delayed_gcode _Bed_Finalizer_Timer]

gcode:
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% set roomtemp = 40 %} 
  {% set desiredCycleCound = 10 %} 
  {% set maxtemp = varis.temperature_bed_max - 1 %}

  {% if printer.heater_bed.target == 0 %} 
    RESPOND TYPE=command MSG="Bed Finalizer: CANCELLED (heater is off)"
    SET_GCODE_VARIABLE MACRO=_varis VARIABLE=bed_prime_count VALUE=-1

  {% elif varis.bed_prime_count == -1 %} 
    M140 S0
    RESPOND TYPE=command MSG="Bed Finalizer: ENDED"

  {% else %}

    {% set curTemp = printer.heater_bed.temperature|int %}
    {% if 1==2 or printer["gcode_macro Calib_Bed_Finalizer"].lasttemp != curTemp|int %}

      {% if (curTemp % 4) == 0 %}
        _Bed_Finalizer_Shaker

        SET_GCODE_VARIABLE MACRO=Calib_Bed_Finalizer VARIABLE=lasttemp VALUE={curTemp}
      {% endif %}
    {% endif %}

    {% if printer.heater_bed.target > 1 %}

      {% if printer.heater_bed.temperature >= maxtemp %}
        M140 S1
        G4 P{60*1000}

        SAVE_VARIABLE VARIABLE=calib_bedfinalizer_heatingcyclestotal  VALUE={psv.calib_bedfinalizer_heatingcyclestotal +1}
        SET_GCODE_VARIABLE MACRO=_varis VARIABLE=bed_prime_count VALUE={varis.bed_prime_count +1}

        {action_respond_info("Bed Finalizer:
        ......Heat cycles: "+(varis.bed_prime_count+1)|string+"
        Heat cycles total: "+(psv.calib_bedfinalizer_heatingcyclestotal+1)|string+"
        Cooling down to "+roomtemp|string+"Â°C...")}

        _Bed_Finalizer_Shaker

        {% if varis.bed_prime_count >= (desiredCycleCound - 1) %} 
          SET_GCODE_VARIABLE MACRO=_varis VARIABLE=bed_prime_count VALUE=-1
        {% endif %}
      {% endif %}

    {% elif printer.heater_bed.target > 0 %} 
      {% if printer.heater_bed.temperature <= roomtemp %}
        RESPOND TYPE=command MSG="Bed Finalizer: Heating up to {maxtemp}Â°C..."

        M140 S{maxtemp}
      {% endif %}
    {% endif %}

  {% endif %}

  {% if (varis.bed_prime_count > -1) and (printer.heater_bed.target > 0) %}
    UPDATE_DELAYED_GCODE ID=_Bed_Finalizer_Timer DURATION=2
  {% endif %}

[gcode_macro _Bed_Finalizer_Shaker]
gcode:
  {% set varis = printer["gcode_macro _varis"] %}

  {% if printer.heater_bed.temperature >= 40 %} 

    {% set cp = printer.toolhead.position.y %}
    RESPOND TYPE=command MSG="shaker"

    {% set oloopC = 20 %}
    {% set iloopC = 40 %}

    {% set add = 0.0005 %}
    {% set add = 0.001 %}
    {% set add = 0.002 %}
    {% set add = 0.003 %} 
    {% set add = 0.004 %} 

    {% if cp == 0 %}

    {% else %}
      {% for o in range(oloopC)%}

        {% set add = (o*add)+add %}
        G4 P25 

        {% for i in range(iloopC) %}
          G1 Y{cp+add}

          G1 Y{cp-add}
          G1 Y{cp}

        {% endfor %}
      {% endfor %}
    {% endif %}

  {% endif %}

[gcode_macro Calib_Save_Config]
description: KPA Button. This will save the data from calibrations, like z-level adjustment, or bed mesh calibration.
gcode:
  {% set myname = "Calib_Save_Config" %}
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% if varis.button_clicked_name != myname %} 
    {action_respond_info("INFO:
    This will save the data from calibrations, like z-level adjustment, or bed mesh calibration. The printer's firmware will restart.

    Click this button within 5 seconds again to save & restart.")}

  {% else %} 
    {action_respond_info("Saving configuration data. Restarting...")}
    SAVE_CONFIG
  {% endif %}

  _UI_Button_Clicked NAME={myname}

[gcode_macro Calib_Z_Level_Paper_Test] 
description: KPA Button. This executes the z-level calibration procedure, aka "Paper Test Method".
gcode:
  {% set myname = "Calib_Z_Level_Paper_Test" %}
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% if (printer.configfile.config.probe is not defined) and (printer.configfile.config.bltouch is not defined) and (printer.configfile.config.smart_effector is not defined)%}

    {action_respond_info("Your printer does not support the Z-Level Calibration.")}

  {% else %}

    {% if varis.button_clicked_name != myname %} 
      {action_respond_info("INFO:
      Z-Level Calibration, aka \"Paper Test Method\" calibrates the distance between the nozzle and the bed.

      On a new printer this calibration should be executed first, before the Bed Screw Calibration, and then directly again after Bed Screw Calibration.

      HOW TO:
      1) Make sure there are no filament residues on the nozzle.

      2) Start the procedure by clicking this button twice within 5 seconds.

      3) The nozzle will drive to the middle of the bed.

      4) A dialog comes up, with a guess of the current distance of the nozzle -> bed.

      5) Repeatedly decrease the distance of the nozzle to the bed by clicking the \"--\" sign (safest).
      â€¢ The \"-\" sign might do nothing, as it could be below the resolution of the stepper motor(s).
      â€¢ If you are confident the distance is high, you can use the knobs under \"Advanced\" to go down in larger steps. 1 mm is the largest step.

      6) As you perform step 5, continually move the paper back and forth until you feel the nozzle is slightly rubbing against the paper.

      7) Click \"Accept\".

      8) Save the new value by clicking \"SAVE_CONFIG\".

      NOTE:
      Likely you will have to fine-tune the z-level after the \"Paper-Test\" Calibration. You can do so by printing the first layer STL-files which you find in the download of the KPA.
      In Mainsail you can then live-adjust the z-level, and once your are happy click \"Save\".
      ")}

    {% else %} 
      RESPOND TYPE=command MSG="START: Z-Level Calibration..."

      _Home_XYZ_IfNotHomed
      PROBE_CALIBRATE
    {% endif %}

  {% endif %}

  _UI_Button_Clicked NAME={myname}

[gcode_macro Calib_Bed_Screws] 
description: KPA Button. This executes the bed-screw calibration procedure, to level the bed by it's adjustment-screws.
gcode:
  {% set myname = "Calib_Bed_Screws" %}
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% if printer.configfile.config.screws_tilt_adjust is not defined %}
    {action_respond_info("Your printer does not support the Bed Screw Calibration.")}

  {% else %}

    {% if varis.button_clicked_name != myname %} 
      {action_respond_info("INFO:
      Bed Screw Calibration is a basic part of printer calibration. It levels the corners of the bed to the same height.

      HOW TO:
      1) Screw all bed screws tight.

      2) Unscrew all bed screws by 2 turns.

      3) Click this button twice to start the procedure.

      â€¢ The upcoming dialog will show you how much to turn the bed's adjustment-screws, to level the bed.

      â€¢ Only adjust one screw at a time - the one with the highest deviation.

      TIPP:
      Ideally you want to level the gantry before the bed, as a non-levelled gantry will propagate down to the bed's adjustment, and may issue first layer problems. See the guide \"How to level your printer\", which is contained in the download of the Klipper Printer Additions.

      Click this button within 5 seconds again to start.")}

    {% else %} 
      RESPOND TYPE=command MSG="START: Bed Screw Calibration..."
      _Home_XYZ_IfNotHomed
      SCREWS_TILT_CALCULATE
    {% endif %}

  {% endif %}

  _UI_Button_Clicked NAME={myname}

[gcode_macro Calib_Probe_Accuracy] 
description: KPA Button. This executes a test if your probe's sensor delivers repeatable results.
gcode:
  {% set myname = "Calib_Probe_Accuracy" %}
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% if (printer.configfile.config.probe is not defined) and (printer.configfile.config.bltouch is not defined) and (printer.configfile.config.smart_effector is not defined)%}

    {action_respond_info("Your printer does not support the Probe Accuracy Check.")}

  {% else %}

    {% if varis.button_clicked_name != myname %} 
      {action_respond_info("INFO:
      This executes a test if your probe's sensor delivers repeatable results.

      The results can be misinterpreted - only one value is of most interest: \"standard deviation\".

      This value tells you how precisely the sensor normally measures. No sensor is perfect, so in some cases it can measure less precisely. The Klipper Printer Additions' Printer Module measure each measuring point twice to detect any slip-ups during the measurement - the point is then measured twice again, until a plausible result is delivered.

      As an example, the probe on my SV07 Plus has a standard deviation of 0.001250 mm. It means that the real height of a 0.20 mm first layer can be anything between 0.19875 and 0.20125 millimeters. More than enough precision from the probe's side.

      TROUBLESHOOTING:
      If you get inconsistens results:
      â€¢ Make sure to have your printer FULLY and PERFECTLY levelled and adjusted. Read the document \"How to level your printer\" in the folder \"Troubleshooting\".
      â€¢ The print head needs to move freely in the Z direction. Check that the filament is not under tension at max-/min X-positions (Z-Tilt, Bed Mesh), and can slide easily into the extruder.
      â€¢ Another source of error is a cable holder that exerts a pushing / pulling force on the print head (e.g. a rubber band).

      HOW TO:
      1) Make sure there are no filament residues on the nozzle.

      2) Start the Test by clicking this button twice within 5 seconds.")}

    {% else %} 
      RESPOND TYPE=command MSG="START: Test Probe Accuracy..."

      _Home_XYZ_IfNotHomed
      PROBE_ACCURACY
    {% endif %}

  {% endif %}

  _UI_Button_Clicked NAME={myname}

[gcode_macro Calib_Rotation_Distance] 
description: KPA Button. This guides you thru the calibration of Rotation Distance.
variable_active_rd:0
gcode:
  {% set myname = "Calib_Rotation_Distance" %}
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}
  {% set varisrd = printer["gcode_macro Calib_Rotation_Distance"] %}

  {% set measuredRD   = params.MEASURED_MM|default(0)|float %}
  {% set tempExtrude  = params.EXTRUDE_TEMPERATURE_C|default(210)|int %}

  {% if not printer.configfile.config.extruder.rotation_distance is defined %}
    RESPOND TYPE=error MSG="Extruder-->Roation Distance is not defined in printer.cfg."
    _Exit_By_Provoked_Error
  {% endif %}

  {% set cfg_RD = printer.configfile.config.extruder.rotation_distance|float %}

  {% set actRD = cfg_RD if (varisrd.active_rd == 0.0) else varisrd.active_rd %}

  {% if varis.button_clicked_name != myname %} 

    {% set suff = ""%}
    {% set helpinfo = "INFO:
    Rotation Distance is an important part of the basic hardware calibration. It directly affects filament flow, and if not properly set any flow settings in your slicer are worth nothing - and you will get different kinds of print problems.

    In this procedure the extruder gets a command to extrude 100mm filament. You will measure how much it really has extruded, and enter the measured value into the input field...

    For measurement a caliper is often recommended, but has in reality several sources of error when trying to precisely mark and measure filament on the extruder. With the Easy Rotation Distance Tool you can measure reliable:
      https://www.printables.com/model/639746

    HOW TO:
    1. Enter your filament's maximum EXTRUDE TEMPERATURE in the button's input field.

    2. Mark the filament at 120 mm.

    3. Click the main button twice within 5 seconds, to extrude 100 mm filament.

    â€¢ Further hints will then follow.
    " %}

    {% if measuredRD != 0 %}

      {% set newRD = (measuredRD / 100 * actRD) %}

      SET_GCODE_VARIABLE MACRO=Calib_Rotation_Distance  VARIABLE=active_rd  VALUE={newRD}

      SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=extruder DISTANCE={newRD}
      {% set actRD = newRD %}

      {% set suff = "

      TEMPORARILY ACTIVE!
      The new value has been TEMPORARILY applied for your convenience, so you can re-test the new value right now:
      â€¢ Mark the filament again at 120 mm.
      â€¢ Double-click the main button to start extruding again.
      â€¢ Your new measurement should be 100mm with less than +-0.5 mm deviation.

      On re-measuring you should always get the identical result. If not, these are sources for errors:
      â€¢ Something with your measurement is wrong. Don't use a caliper, use: https://www.printables.com/model/639746
      â€¢ The filament does not slide easily enough into the extruder because there's too much drag somewhere before the extruder.
      â€¢ The extruder's filament pressure screw is not screwed tight enough, so the filament slips at the gears at times.

      PERMANENTLY!
      When your re-test was successful you make the new value PERMANENT by copy & paste it into the printer.cfg file.
      In printer.cfg you will find multiple \"rotation_distance\"-parameters. You need to change the value under the \"[extruder]\" section. In your case it looks like this:

      [extruder]
      ...some parameters...
      rotation_distance: "+cfg_RD|string+"
      ...some parameters...

      Replace the value of "+cfg_RD|string+" with the new value "+newRD|string+".
      Then save the printer.cfg file & restart. Enjoy your super-well calibrated hardware flow rate.

      Note that different filaments have slightly different diameters, which results in more/less material on the same extruded distance. So you need to calibrate your filament's flow settings too. OrcaSlicer has a build-in test for that - other slicers will hopefully follow in 2024..."%}

      {% set helpinfo = ""%}

    {% else %}
      {% set newRD = "n/a" %}
    {% endif %}

    {% set m = helpinfo + "
    Current values:
    printer.cfg Rotation Distance Value: "+cfg_RD|string+"
    .....Active Rotation Distance Value: "+actRD|string+"
    ........Temperature to extrude with: "+tempExtrude|string+"Â°C
    ............Measured extrude Length: "+measuredRD|string+" mm
    Your new Rotation Distance Value is: "+newRD|string+". "+suff  %}

    {action_respond_info(m)}

  {% else %} 

    _HeatFast_Wait_Nozzle TEMPTARGET={tempExtrude}

    {% set target_z = (0.40 * varis.axis_z_pos_max) %} 

    {% if (not "xyz" in printer.toolhead.homed_axes) or (printer.toolhead.position.z != target_z) %}
      RESPOND TYPE=command MSG="Driving print head high, for easier measurment."
      _Home_XYZ_IfNotHomed
      G1 Z{target_z} 
    {% endif %}

    RESPOND TYPE=command MSG="Speed heating to target temperature..."
    _HeatFast_Wait_Nozzle TEMPTARGET={tempExtrude} TEMPMIN={tempExtrude}

    {% set mm_per_minute = 100*0.5 %}
    G91                       
    G92 E0 
    {% set mm ="â€¢ 100 mm filament will now be extruded very slowly.

    4. When finished, measure how much mm it really has extruded.

    5. Enter the measured distance in millimeters into the input field of the button.

    â€¢ Further hints will then follow." %}

    {action_respond_info(mm)}

    G1 E100 F{mm_per_minute}  
    G1 X1
    G1 X-1
    G92 E0 
    G90                       
    M104 S0 

  {% endif %}

  _UI_Button_Clicked NAME={myname}