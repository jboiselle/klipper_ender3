;  Sovol SV07 Part Fan Control (Nozzle part fan and Auxiliary part fan)
;  Part of CV's Klipper Printer Additions.
;    
;  â€¢ Minimum Auxiliary Fan Spin:
;    If you use my SV07 2x120mm fan mod (still not released yet, damn), or any other custom fan, you can change it's minimum required spin-value in the file "saved_variables.cfg".
;    The variable is named "fan_part_auxiliary_percent_minimum". The value is in percent, like you set the fan slider in fluidd/Mainsail. There you can try from which value the fan starts spinning properly.
;    For example, if you set it to 20, then the auxiliary fan will spin with "20%" for all lower values it receives from g-code commands.
;
;  â€¢ Everything tested with SV07 firmware 1.0.11 / 1.0.17 / 1.0.8-07P.
;    
;
;  â€¢â€¢â€¢â€¢ Support
;  â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢
;    If my work supports you, you might like to support me too.
;  â€¢ PayPal: https://www.paypal.com/paypalme/Morgennebel/
;    
;    
;    When you buy something, please use my Referal-Link, at no additional cost:
;  â€¢ AliExpress: https://s.click.aliexpress.com/e/_De0Vu1h
;  â€¢ Amazon: https://amzn.to/3L35OX2
;    
;    Thank you!
;    Christian ðŸ™‚

[delayed_gcode _startup_check_sv07_fans_part]
initial_duration: 3.05 
gcode:

  {% set module_version = "3.0b4" %} 
  _Module_loaded_printer_add NAME="Sovol SV07 Part Fans" VERSION="{module_version}"

  {% set psv = printer.save_variables.variables %}

  {% if psv.fan_part_auxiliary_mode               is not defined %} SAVE_VARIABLE VARIABLE=fan_part_auxiliary_mode               VALUE='"off"' {% endif %} 
  {% if psv.fan_part_auxiliary_speed_limit        is not defined %} SAVE_VARIABLE VARIABLE=fan_part_auxiliary_speed_limit        VALUE=100 {% endif %} 

  {% if psv.fan_part_auxiliary_percent_minimum is not defined %} SAVE_VARIABLE VARIABLE=fan_part_auxiliary_percent_minimum VALUE=10 {% endif %} 

  {% if psv.fan_part_mode                        is not defined %} SAVE_VARIABLE VARIABLE=fan_part_mode                        VALUE='"dynamic"' {% endif %} 
  {% if psv.fan_part_speed_limit                 is not defined %} SAVE_VARIABLE VARIABLE=fan_part_speed_limit                 VALUE=100 {% endif %} 

  {% if psv.fan_part_auxiliary_mode is not in ["off", "dynamic", "permanent"] %}
    SAVE_VARIABLE VARIABLE=fan_part_auxiliary_mode VALUE='"off"'
  {% endif %}

  {% if psv.fan_part_mode is not in ["off", "dynamic", "permanent"] %}
    SAVE_VARIABLE VARIABLE=fan_part_mode VALUE='"dynamic"'
  {% endif %}

[gcode_macro Fan_Part_Aux_Speed_Limit]
description: KPA Button. During printing, apply a speed limit to the auxiliary part fan.
gcode:
  {% set myname = "Fan_Part_Aux_Speed_Limit" %}
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% set slim = params.SPEED_LIMIT|default(100)|int %}
  {% set mode = varis.fan_part_auxiliary_mode %}
  {% set slim = 100 if slim > 100 else slim %}
  {% set slim = 5 if slim < 5 else slim %}

  {% set fanmode = psv.fan_part_auxiliary_mode.upper() %}

  {% if slim != 100 %} 
    {% set pre = "SET: " %}

  {% elif varis.button_clicked_name != myname %} 
    {% set pre = "STATUS: " %}
    {% set slim = psv.fan_part_auxiliary_speed_limit %}

  {% else %} 
    {% set pre = "RESET: " %}

  {% endif %}

  {% set mlim = "No " if (slim == 100) else (slim|string + "%") %}

  {% set m = pre + mlim + " speed limit. Auxiliary Fan Mode: " + fanmode  + ".

  â€¢ Click the arrow on the button to enter the fan's speed limit.
  â€¢ Click this button again within 5 seconds, to reset the speed limit.
  â€¢ You may change the value during printing.

  INFO:
  If the fan runs in Dynamic mode, gcode-fan-commands higher than the limit will be reduced to the limit.
  If the fan runs in Permanent mode, any gcode-fan-commands will be converted to the value of the limit." %}

  {action_respond_info(m)}

  {% if "SET" in pre %} 
    SAVE_VARIABLE VARIABLE=fan_part_auxiliary_speed_limit VALUE={slim}

  {% endif %}

  _UI_Button_Clicked NAME={myname}

  _Fan_Trigger

[gcode_macro Fan_Part_Nozzle_Speed_Limit]
description: KPA Button. During printing, apply a speed limit to the nozzle part fan.
gcode:
  {% set myname = "Fan_Part_Nozzle_Speed_Limit" %}
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% set slim = params.SPEED_LIMIT|default(100)|int %}
  {% set mode = varis.fan_part_mode %}
  {% set slim = 100 if slim > 100 else slim %}
  {% set slim = 5 if slim < 5 else slim %}

  {% set fanmode = psv.fan_part_mode.upper() %}

  {% if slim != 100 %} 
    {% set pre = "SET: " %}

  {% elif varis.button_clicked_name != myname %} 
    {% set pre = "STATUS: " %}
    {% set slim = psv.fan_part_speed_limit %}

  {% else %} 
    {% set pre = "RESET: " %}

  {% endif %}

  {% set mlim = "No " if (slim == 100) else (slim|string + "%") %}

  {% set m = pre + mlim + " speed limit. " + "Part Fan Mode: " + fanmode  + ".

  â€¢ Click the arrow on the button to enter the fan's speed limit.
  â€¢ Click this button again within 5 seconds, to reset the speed limit.
  â€¢ You may change the value during printing.

  INFO:
  If the fan runs in Dynamic mode, gcode-fan-commands higher than the limit will be reduced to the limit.
  If the fan runs in Permanent mode, any gcode-fan-commands will be converted to the value of the limit." %}

  {action_respond_info(m)}

  {% if "SET" in pre %} 
    SAVE_VARIABLE VARIABLE=fan_part_speed_limit VALUE={slim}

  {% endif %}

  _UI_Button_Clicked NAME={myname}

  _Fan_Trigger

[gcode_macro Fan_Part_Aux_Modi]
description: KPA Button. During printing, let the auxiliary part fan spin normally / permanently / off.
gcode:
  {% set myname = "Fan_Part_Aux_Modi" %}
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% set modi = ["off", "dynamic", "permanent"]%}
  {% set mode = psv.fan_part_auxiliary_mode%}

  {% if varis.button_clicked_name != myname %} 
    {% set pre = "STATUS: " %}

  {% else %} 
    {% set pre = "SET: " %}

    {% set idx = modi.index(mode) %}
    {% set idxnext = (idx+1) if ((modi|length -1) > idx) else 0 %}
    {% set mode = modi[idxnext] %} 
    SAVE_VARIABLE VARIABLE=fan_part_auxiliary_mode VALUE='"{mode}"'

  {% endif %}

  {% set mlim = "OFF" if (psv.fan_part_auxiliary_speed_limit == 100) else (psv.fan_part_auxiliary_speed_limit|string + "%") %}
  {% set suff = (" Speed limit: " + mlim) if (mode is in ["dynamic", "permanent"]) else "" %}
  {% set m = pre + mode.upper() + " for Auxiliary Fan Mode." + suff + "

  â€¢ Click this button again within 5 seconds, to toggle between Off / Dynamic / Permanent.
  â€¢ You may change the mode during printing.

  INFO:
  â€¢ Dynamic mode: The aux fan spins with the speed of the nozzle part fan.
  You may set a speed limit for the aux fan.

  â€¢ Permanent mode: The aux fan will spin with full-speed, whenever the nozzle part fan spins.
  If a speed limit is set, that value will be always used instead."%}

  {action_respond_info(m)}

  _UI_Button_Clicked NAME={myname}

  _Fan_Trigger FAN="aux" MODE={mode}

[gcode_macro Fan_Part_Nozzle_Modi]
description: KPA Button. During printing, let the nozzle part fan spin normally / permanently / off.
gcode:
  {% set myname = "Fan_Part_Modi" %}
  {% set psv = printer.save_variables.variables %}
  {% set varis = printer["gcode_macro _varis"] %}

  {% set modi = ["off", "dynamic", "permanent"]%}
  {% set mode = psv.fan_part_mode%}

  {% if varis.button_clicked_name != myname %} 
    {% set pre = "STATUS: " %}

  {% else %} 
    {% set pre = "SET: " %}

    {% set idx = modi.index(mode) %}
    {% set idxnext = (idx+1) if ((modi|length -1) > idx) else 0 %}
    {% set mode = modi[idxnext] %} 
    SAVE_VARIABLE VARIABLE=fan_part_mode VALUE='"{mode}"'

  {% endif %}

  {% set mlim = "OFF" if (psv.fan_part_speed_limit == 100) else (psv.fan_part_speed_limit|string + "%") %}
  {% set suff = (" Speed limit: " + mlim) if (mode is in ["dynamic", "permanent"]) else "" %}
  {% set m = pre + mode.upper() + " for Part Fan Mode." + suff + "

  â€¢ Click this button again within 5 seconds, to toggle between Off / Dynamic / Permanent.
  â€¢ You may change the mode during printing.

  INFO:
  â€¢ Dynamic mode: The nozzle fan spins normally, according to the g-code commands from the slicer.
  You may set a speed limit for the nozzle fan.

  â€¢ Permanent mode: The nozzle fan will spin with full-speed, whenever it receives a g-code command to spin.
  If a speed limit is set, that value will be always used instead." %}

  {action_respond_info(m)}

  _UI_Button_Clicked NAME={myname}

  _Fan_Trigger FAN="nozzle" MODE={mode}

[gcode_macro Fan_Part_Aux_Timer]
description: KPA Button. Let the auxiliary part fan spin for x minutes by y% speed, to quickly cool the model / build plate after printing. Place the build plate vertically onto the bed, and let the fan blow on it.
gcode:
  {% set myname = "Fan_Part_Aux_Timer" %}
  {% set seconds = params.SECONDS|default(0)|int %}
  {% set speed = params.SPEED|default(50)|int %}

  {% set seconds = 3600 if seconds > 3600 else seconds %}
  {% set seconds = 0 if seconds < 0 else seconds %}

  {% set speed = 5 if speed < 5 else speed %}
  {% set speed = 100 if speed > 100 else speed %}

  {% set speedset = speed/100|int %}

  {% set speedset = 0 if seconds == 0 else speedset %}

  {% if (speedset > 0) and (seconds > 0) %}
    {action_respond_info("Auxiliary Part Fan Timer:
    Will run for "+seconds|string+" seconds at "+speed|string+"% speed.

    To quickly cool down the model / built plate, set the built plate vertically onto the bed, and let the fan blow on it.")}

    SET_FAN_SPEED FAN="extruder_partfan" SPEED={speedset}
    UPDATE_DELAYED_GCODE ID=_EPF_Run_Timer DURATION={seconds}

  {% else %}
    {action_respond_info("INFO:
    You may run the aux fan to cool down the model / built plate quickly after the print.
    Set the built plate vertically onto the bed, and let the fan blow on it, for about 180 seconds at 50% speed.

    You may automate this by putting the following command into the End-G-Code of your slicer app:

    Fan_Part_Aux_Timer SECONDS=180 SPEED=50")}

  {% endif %}

##### Macro-Buttons End

[gcode_macro _PPActionFlow_PrintStartTextOutput_Before_PrinterSpecific]
# Here you can plug in anything should happen before the KPA spits out the text with the status of the modi and options.
gcode:
  {% set psv = printer.save_variables.variables %}
  {% if psv.fan_part_mode == "permanent" %} M106106 S0 {% endif %} 

[gcode_macro _PPActionFlow_PrintStartTextOutput_After_PrinterSpecific]

gcode:
  {% set psv = printer.save_variables.variables %}

  {% set pinfo = "" %}
  {% if psv.fan_part_auxiliary_mode is defined and psv.fan_part_auxiliary_speed_limit is defined %}
    {% set pinfo = pinfo + "â€¢ Dynamic Speed (0-"+psv.fan_part_auxiliary_speed_limit|string+"%): Auxiliary Part Fan.\n" if psv.fan_part_auxiliary_mode == "dynamic" else pinfo %}
    {% set pinfo = pinfo + "â€¢ Permanent Speed ("+psv.fan_part_auxiliary_speed_limit|string+"%): Auxiliary Part Fan.\n" if psv.fan_part_auxiliary_mode == "permanent" else pinfo %}
    {% set pinfo = pinfo + "â€¢ OFF: Auxiliary Part Fan.\n" if psv.fan_part_auxiliary_mode == "off" else pinfo %}
  {% endif %}

  {% if psv.fan_part_mode is defined and psv.fan_part_speed_limit is defined %}
    {% set pinfo = pinfo + "â€¢ Dynamic Speed (0-"+psv.fan_part_speed_limit|string+"%): Part Fan.\n" if psv.fan_part_mode == "dynamic" else pinfo %}
    {% set pinfo = pinfo + "â€¢ Permanent Speed ("+psv.fan_part_speed_limit|string+"%): Part Fan.\n" if psv.fan_part_mode == "permanent" else pinfo %}
    {% set pinfo = pinfo + "â€¢ OFF: Part Fan.\n" if psv.fan_part_mode == "off" else pinfo %}
  {% endif %}

  {action_respond_info(pinfo)}

  {% if psv.fan_part_auxiliary_mode is defined and psv.fan_part_auxiliary_speed_limit is defined %}
    {% if (psv.fan_part_auxiliary_mode != "off") and (psv.fan_part_auxiliary_speed_limit < 100) %}
        RESPOND TYPE=error MSG="Note: Auxiliary part fan has set a speed limit of {psv.fan_part_auxiliary_speed_limit}%."
    {% endif %}
    {% if (psv.fan_part_mode != "off") and (psv.fan_part_speed_limit < 100) %}
        RESPOND TYPE=error MSG="Note: Nozzle part fan has set a speed limit of {psv.fan_part_speed_limit}%."
    {% endif %}
  {% endif %}

[delayed_gcode _EPF_Run_Timer]

gcode:

  SET_FAN_SPEED FAN="extruder_partfan" SPEED=0

[gcode_macro _Fan_Trigger]
gcode:

  {% set psv = printer.save_variables.variables %}
  {% set fan = params.FAN|default("")|string %}
  {% set mode = params.MODE|default("")|string %}

  {% if psv.print_is_running_f %}

    {% if mode == "off" %}
      {% if fan == "nozzle" %} M106 S0 {% endif %}
      {% if fan == "aux" %} SET_FAN_SPEED FAN="extruder_partfan" SPEED=0 {% endif %}

    {% elif mode == "permanent" %}
      {% if fan == "nozzle" %}
        {% set speedlimitnoz = psv.fan_part_speed_limit / 100 %} 
        {% set speedminimum = 9/100 %} 

        {% set setval = speedminimum if (speedlimitnoz < speedminimum) else speedlimitnoz %}
        M106106 S{setval*255}

      {% elif fan == "aux" %}
        {% set speedlimitaux = psv.fan_part_auxiliary_speed_limit / 100 %} 
        {% set speedminimum = psv.fan_part_auxiliary_percent_minimum / 100 %}

        {% set setval = speedminimum if (speedlimitaux < speedminimum) else speedlimitaux %}
        SET_FAN_SPEED FAN="extruder_partfan" SPEED={setval}
      {% endif %}

    {% endif %}

  {% endif %}

[gcode_macro M107]
rename_existing: M107107
gcode:
  M106106 S0

  SET_FAN_SPEED FAN="extruder_partfan" SPEED=0

[gcode_macro M106]
rename_existing: M106106
gcode:

  {% set s = params.S|float %} 
  {% set convertv = (s/255) %} 

  {% set psv = printer.save_variables.variables %}

  {% set cur_z = printer.toolhead.position.z|float %}

  {% set setval = convertv %}
  {% set mode = psv.fan_part_mode %}

  {% set speedlimitnoz = psv.fan_part_speed_limit / 100 %} 

  {% set speedminimum = 9/100 %} 

  {% if mode == "permanent"%}
    {% if setval > 0 or (psv.print_is_running_f and cur_z > 0.32) %} 
      {% set setval = speedminimum if (speedlimitnoz < speedminimum) else speedlimitnoz %}
      M106106 S{setval*255}
    {% else %}
      M106106 S0
    {% endif %}

  {% elif mode == "dynamic" %}
    {% if setval > 0 %}
      {% set setval = speedminimum  if ((setval < speedminimum) or (speedlimitnoz < speedminimum)) else setval %}
      {% set setval = speedlimitnoz if (setval > speedlimitnoz) else setval %}
    {% endif %}
    M106106 S{setval*255}

  {% elif mode == "off"%}
    M106106 S0

  {% endif %}

  {% set setval = convertv %}
  {% set mode = psv.fan_part_auxiliary_mode %}

  {% set speedlimitaux = psv.fan_part_auxiliary_speed_limit / 100 %} 
  {% set speedminimum = psv.fan_part_auxiliary_percent_minimum / 100 %}

  {% if mode == "permanent" %}
    {% if setval > 0 or (psv.print_is_running_f and cur_z > 0.2) %} 
      {% set setval = speedminimum if (speedlimitaux < speedminimum) else speedlimitaux %}
      SET_FAN_SPEED FAN="extruder_partfan" SPEED={setval}
    {% else %}
      SET_FAN_SPEED FAN="extruder_partfan" SPEED=0
   {% endif %}

  {% elif mode == "dynamic" %}
    {% if setval > 0 %}
      {% set setval = speedlimitaux if (setval > speedlimitaux) else setval %}
      {% set setval = speedminimum  if ((setval < speedminimum) or (speedlimitaux < speedminimum)) else setval %}
    {% endif %}
    SET_FAN_SPEED FAN="extruder_partfan" SPEED={setval}

  {% elif mode == "off" %}

  {% endif %}

[duplicate_pin_override] 

pins: PE9,PE13,PE11,PD3 

[fan] 
pin: PE9 

[fan_generic extruder_partfan] 

pin:PE13